{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-1cc5b6d7e52a6897d2e8977ed6612b948a56a47e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/MedicalRecordTransfer.sol": "project/contracts/MedicalRecordTransfer.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "london",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/MedicalRecordTransfer.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IMedicalRecords {\n    function getRecords(address _patient) external view returns (string[] memory);\n}\n\ncontract MedicalRecordTransfer {\n    IMedicalRecords public medicalRecords;\n    \n    struct TransferRequest {\n        address fromPatient;\n        address toRecipient;\n        string[] ipfsCids;\n        uint256 timestamp;\n        bool completed;\n        bool approved;\n        string purpose;\n        uint256 expiry;\n    }\n    \n    mapping(bytes32 => TransferRequest) public transferRequests;\n    mapping(address => bytes32[]) public patientTransfers;\n    mapping(address => bytes32[]) public recipientTransfers;\n    \n    event TransferRequested(\n        bytes32 indexed requestId,\n        address indexed fromPatient,\n        address indexed toRecipient,\n        string[] ipfsCids,\n        uint256 timestamp,\n        string purpose,\n        uint256 expiry\n    );\n    \n    event TransferApproved(\n        bytes32 indexed requestId,\n        address indexed fromPatient,\n        address indexed toRecipient,\n        uint256 approvedAt\n    );\n    \n    event TransferCompleted(\n        bytes32 indexed requestId,\n        address indexed fromPatient,\n        address indexed toRecipient,\n        uint256 completedAt\n    );\n    \n    event TransferRejected(\n        bytes32 indexed requestId,\n        address indexed fromPatient,\n        address indexed toRecipient,\n        uint256 rejectedAt\n    );\n\n    constructor(address _medicalRecordsAddress) {\n        require(_medicalRecordsAddress != address(0), \"Invalid medical records address\");\n        medicalRecords = IMedicalRecords(_medicalRecordsAddress);\n    }\n    \n    function requestTransfer(\n        address _toRecipient,\n        string[] memory _ipfsCids,\n        string memory _purpose,\n        uint256 _durationInHours\n    ) external returns (bytes32) {\n        require(_toRecipient != address(0), \"Invalid recipient address\");\n        require(_toRecipient != msg.sender, \"Cannot transfer to yourself\");\n        require(_ipfsCids.length > 0, \"No records specified\");\n        require(_durationInHours > 0 && _durationInHours <= 720, \"Duration must be between 1 and 720 hours\");\n        \n        // Verify the patient owns these records\n        string[] memory patientRecords = medicalRecords.getRecords(msg.sender);\n        for (uint i = 0; i < _ipfsCids.length; i++) {\n            bool recordExists = false;\n            for (uint j = 0; j < patientRecords.length; j++) {\n                if (keccak256(bytes(_ipfsCids[i])) == keccak256(bytes(patientRecords[j]))) {\n                    recordExists = true;\n                    break;\n                }\n            }\n            require(recordExists, \"Patient does not own one or more specified records\");\n        }\n        \n        bytes32 requestId = keccak256(abi.encode(\n            msg.sender,\n            _toRecipient,\n            block.timestamp,\n            _ipfsCids\n        ));\n        \n        uint256 expiry = block.timestamp + (_durationInHours * 1 hours);\n        \n        transferRequests[requestId] = TransferRequest({\n            fromPatient: msg.sender,\n            toRecipient: _toRecipient,\n            ipfsCids: _ipfsCids,\n            timestamp: block.timestamp,\n            completed: false,\n            approved: false,\n            purpose: _purpose,\n            expiry: expiry\n        });\n        \n        patientTransfers[msg.sender].push(requestId);\n        recipientTransfers[_toRecipient].push(requestId);\n        \n        emit TransferRequested(\n            requestId,\n            msg.sender,\n            _toRecipient,\n            _ipfsCids,\n            block.timestamp,\n            _purpose,\n            expiry\n        );\n        \n        return requestId;\n    }\n    \n    function approveTransfer(bytes32 _requestId) external {\n        TransferRequest storage request = transferRequests[_requestId];\n        require(request.fromPatient == msg.sender, \"Only patient can approve transfer\");\n        require(!request.approved, \"Transfer already approved\");\n        require(block.timestamp <= request.expiry, \"Transfer request expired\");\n        \n        request.approved = true;\n        \n        emit TransferApproved(_requestId, request.fromPatient, request.toRecipient, block.timestamp);\n    }\n    \n    function completeTransfer(bytes32 _requestId) external {\n        TransferRequest storage request = transferRequests[_requestId];\n        require(request.toRecipient == msg.sender, \"Only recipient can complete transfer\");\n        require(request.approved, \"Transfer not approved by patient\");\n        require(!request.completed, \"Transfer already completed\");\n        require(block.timestamp <= request.expiry, \"Transfer request expired\");\n        \n        request.completed = true;\n        \n        emit TransferCompleted(_requestId, request.fromPatient, request.toRecipient, block.timestamp);\n    }\n    \n    function rejectTransfer(bytes32 _requestId) external {\n        TransferRequest storage request = transferRequests[_requestId];\n        require(request.fromPatient == msg.sender, \"Only patient can reject transfer\");\n        require(!request.completed, \"Transfer already completed\");\n        \n        // Mark as completed to prevent further actions\n        request.completed = true;\n        \n        emit TransferRejected(_requestId, request.fromPatient, request.toRecipient, block.timestamp);\n    }\n    \n    function getTransferRequest(bytes32 _requestId) external view returns (\n        address fromPatient,\n        address toRecipient,\n        string[] memory ipfsCids,\n        uint256 timestamp,\n        bool completed,\n        bool approved,\n        string memory purpose,\n        uint256 expiry\n    ) {\n        TransferRequest memory request = transferRequests[_requestId];\n        return (\n            request.fromPatient,\n            request.toRecipient,\n            request.ipfsCids,\n            request.timestamp,\n            request.completed,\n            request.approved,\n            request.purpose,\n            request.expiry\n        );\n    }\n    \n    function getPatientTransfers(address _patient) external view returns (bytes32[] memory) {\n        return patientTransfers[_patient];\n    }\n    \n    function getRecipientTransfers(address _recipient) external view returns (bytes32[] memory) {\n        return recipientTransfers[_recipient];\n    }\n    \n    function getPatientRecords(address _patient) external view returns (string[] memory) {\n        return medicalRecords.getRecords(_patient);\n    }\n}"
      }
    }
  }
}