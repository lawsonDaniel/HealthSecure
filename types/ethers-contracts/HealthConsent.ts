/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface HealthConsentInterface extends Interface {
    getFunction(nameOrSignature: "getConsent" | "signConsent"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ConsentSigned"): EventFragment;

    encodeFunctionData(functionFragment: 'getConsent', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'signConsent', values: [AddressLike, string]): string;

    decodeFunctionResult(functionFragment: 'getConsent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'signConsent', data: BytesLike): Result;
  }

  
    export namespace ConsentSignedEvent {
      export type InputTuple = [patient: AddressLike, timestamp: BigNumberish, consentHash: string];
      export type OutputTuple = [patient: string, timestamp: bigint, consentHash: string];
      export interface OutputObject {patient: string, timestamp: bigint, consentHash: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface HealthConsent extends BaseContract {
    
    connect(runner?: ContractRunner | null): HealthConsent;
    waitForDeployment(): Promise<this>;

    interface: HealthConsentInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getConsent: TypedContractMethod<
      [_patient: AddressLike, ],
      [[boolean, bigint, string]],
      'view'
    >
    

    
    signConsent: TypedContractMethod<
      [_patient: AddressLike, _consentHash: string, ],
      [boolean],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getConsent'): TypedContractMethod<
      [_patient: AddressLike, ],
      [[boolean, bigint, string]],
      'view'
    >;
getFunction(nameOrSignature: 'signConsent'): TypedContractMethod<
      [_patient: AddressLike, _consentHash: string, ],
      [boolean],
      'nonpayable'
    >;

    getEvent(key: 'ConsentSigned'): TypedContractEvent<ConsentSignedEvent.InputTuple, ConsentSignedEvent.OutputTuple, ConsentSignedEvent.OutputObject>;

    filters: {
      
      'ConsentSigned(address,uint256,string)': TypedContractEvent<ConsentSignedEvent.InputTuple, ConsentSignedEvent.OutputTuple, ConsentSignedEvent.OutputObject>;
      ConsentSigned: TypedContractEvent<ConsentSignedEvent.InputTuple, ConsentSignedEvent.OutputTuple, ConsentSignedEvent.OutputObject>;
    
    };
  }