/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MedicalRecordAccessInterface extends Interface {
    getFunction(nameOrSignature: "getEncryptedKeyShare" | "getGranteeAccess" | "grantAccess" | "grants" | "hasAccess" | "healthConsent" | "medicalRecords" | "revokeAccess"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AccessGranted" | "AccessRevoked"): EventFragment;

    encodeFunctionData(functionFragment: 'getEncryptedKeyShare', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'getGranteeAccess', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'grantAccess', values: [AddressLike, string, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'grants', values: [AddressLike, AddressLike, string]): string;
encodeFunctionData(functionFragment: 'hasAccess', values: [AddressLike, AddressLike, string]): string;
encodeFunctionData(functionFragment: 'healthConsent', values?: undefined): string;
encodeFunctionData(functionFragment: 'medicalRecords', values?: undefined): string;
encodeFunctionData(functionFragment: 'revokeAccess', values: [AddressLike, string]): string;

    decodeFunctionResult(functionFragment: 'getEncryptedKeyShare', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getGranteeAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grants', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'healthConsent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'medicalRecords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeAccess', data: BytesLike): Result;
  }

  
    export namespace AccessGrantedEvent {
      export type InputTuple = [patient: AddressLike, grantee: AddressLike, ipfsCid: string, expiration: BigNumberish];
      export type OutputTuple = [patient: string, grantee: string, ipfsCid: string, expiration: bigint];
      export interface OutputObject {patient: string, grantee: string, ipfsCid: string, expiration: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace AccessRevokedEvent {
      export type InputTuple = [patient: AddressLike, grantee: AddressLike, ipfsCid: string];
      export type OutputTuple = [patient: string, grantee: string, ipfsCid: string];
      export interface OutputObject {patient: string, grantee: string, ipfsCid: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MedicalRecordAccess extends BaseContract {
    
    connect(runner?: ContractRunner | null): MedicalRecordAccess;
    waitForDeployment(): Promise<this>;

    interface: MedicalRecordAccessInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getEncryptedKeyShare: TypedContractMethod<
      [patient: AddressLike, ipfsCid: string, ],
      [string],
      'view'
    >
    

    
    getGranteeAccess: TypedContractMethod<
      [grantee: AddressLike, patient: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    grantAccess: TypedContractMethod<
      [grantee: AddressLike, ipfsCid: string, expiration: BigNumberish, encryptedKeyShare: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    grants: TypedContractMethod<
      [arg0: AddressLike, arg1: AddressLike, arg2: string, ],
      [[string, string, string, bigint, bigint] & {patient: string, grantee: string, ipfsCid: string, expiration: bigint, timestamp: bigint }],
      'view'
    >
    

    
    hasAccess: TypedContractMethod<
      [patient: AddressLike, grantee: AddressLike, ipfsCid: string, ],
      [boolean],
      'view'
    >
    

    
    healthConsent: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    medicalRecords: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    revokeAccess: TypedContractMethod<
      [grantee: AddressLike, ipfsCid: string, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getEncryptedKeyShare'): TypedContractMethod<
      [patient: AddressLike, ipfsCid: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getGranteeAccess'): TypedContractMethod<
      [grantee: AddressLike, patient: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantAccess'): TypedContractMethod<
      [grantee: AddressLike, ipfsCid: string, expiration: BigNumberish, encryptedKeyShare: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'grants'): TypedContractMethod<
      [arg0: AddressLike, arg1: AddressLike, arg2: string, ],
      [[string, string, string, bigint, bigint] & {patient: string, grantee: string, ipfsCid: string, expiration: bigint, timestamp: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'hasAccess'): TypedContractMethod<
      [patient: AddressLike, grantee: AddressLike, ipfsCid: string, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'healthConsent'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'medicalRecords'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'revokeAccess'): TypedContractMethod<
      [grantee: AddressLike, ipfsCid: string, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'AccessGranted'): TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
getEvent(key: 'AccessRevoked'): TypedContractEvent<AccessRevokedEvent.InputTuple, AccessRevokedEvent.OutputTuple, AccessRevokedEvent.OutputObject>;

    filters: {
      
      'AccessGranted(address,address,string,uint256)': TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
      AccessGranted: TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
    

      'AccessRevoked(address,address,string)': TypedContractEvent<AccessRevokedEvent.InputTuple, AccessRevokedEvent.OutputTuple, AccessRevokedEvent.OutputObject>;
      AccessRevoked: TypedContractEvent<AccessRevokedEvent.InputTuple, AccessRevokedEvent.OutputTuple, AccessRevokedEvent.OutputObject>;
    
    };
  }