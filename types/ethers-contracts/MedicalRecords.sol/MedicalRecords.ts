/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MedicalRecordsInterface extends Interface {
    getFunction(nameOrSignature: "getKeyShare" | "getRecords" | "grantAccess" | "healthConsent" | "uploadRecord"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AccessGranted" | "RecordUploaded"): EventFragment;

    encodeFunctionData(functionFragment: 'getKeyShare', values: [string]): string;
encodeFunctionData(functionFragment: 'getRecords', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'grantAccess', values: [AddressLike, string, BytesLike]): string;
encodeFunctionData(functionFragment: 'healthConsent', values?: undefined): string;
encodeFunctionData(functionFragment: 'uploadRecord', values: [string, BytesLike]): string;

    decodeFunctionResult(functionFragment: 'getKeyShare', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRecords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'healthConsent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'uploadRecord', data: BytesLike): Result;
  }

  
    export namespace AccessGrantedEvent {
      export type InputTuple = [patient: AddressLike, authorized: AddressLike, ipfsCid: string];
      export type OutputTuple = [patient: string, authorized: string, ipfsCid: string];
      export interface OutputObject {patient: string, authorized: string, ipfsCid: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RecordUploadedEvent {
      export type InputTuple = [patient: AddressLike, timestamp: BigNumberish, ipfsCid: string];
      export type OutputTuple = [patient: string, timestamp: bigint, ipfsCid: string];
      export interface OutputObject {patient: string, timestamp: bigint, ipfsCid: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MedicalRecords extends BaseContract {
    
    connect(runner?: ContractRunner | null): MedicalRecords;
    waitForDeployment(): Promise<this>;

    interface: MedicalRecordsInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getKeyShare: TypedContractMethod<
      [_ipfsCid: string, ],
      [string],
      'view'
    >
    

    
    getRecords: TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    grantAccess: TypedContractMethod<
      [_authorized: AddressLike, _ipfsCid: string, _encryptedKeyShare: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    healthConsent: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    uploadRecord: TypedContractMethod<
      [_ipfsCid: string, _selfEncryptedKeyShare: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getKeyShare'): TypedContractMethod<
      [_ipfsCid: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getRecords'): TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantAccess'): TypedContractMethod<
      [_authorized: AddressLike, _ipfsCid: string, _encryptedKeyShare: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'healthConsent'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'uploadRecord'): TypedContractMethod<
      [_ipfsCid: string, _selfEncryptedKeyShare: BytesLike, ],
      [boolean],
      'nonpayable'
    >;

    getEvent(key: 'AccessGranted'): TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
getEvent(key: 'RecordUploaded'): TypedContractEvent<RecordUploadedEvent.InputTuple, RecordUploadedEvent.OutputTuple, RecordUploadedEvent.OutputObject>;

    filters: {
      
      'AccessGranted(address,address,string)': TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
      AccessGranted: TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
    

      'RecordUploaded(address,uint256,string)': TypedContractEvent<RecordUploadedEvent.InputTuple, RecordUploadedEvent.OutputTuple, RecordUploadedEvent.OutputObject>;
      RecordUploaded: TypedContractEvent<RecordUploadedEvent.InputTuple, RecordUploadedEvent.OutputTuple, RecordUploadedEvent.OutputObject>;
    
    };
  }