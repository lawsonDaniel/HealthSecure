/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MedicalRecordTransferInterface extends Interface {
    getFunction(nameOrSignature: "approveTransfer" | "completeTransfer" | "getPatientRecords" | "getPatientTransfers" | "getRecipientTransfers" | "getTransferRequest" | "medicalRecords" | "patientTransfers" | "recipientTransfers" | "rejectTransfer" | "requestTransfer" | "transferRequests"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "TransferApproved" | "TransferCompleted" | "TransferRejected" | "TransferRequested"): EventFragment;

    encodeFunctionData(functionFragment: 'approveTransfer', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'completeTransfer', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getPatientRecords', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getPatientTransfers', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getRecipientTransfers', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getTransferRequest', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'medicalRecords', values?: undefined): string;
encodeFunctionData(functionFragment: 'patientTransfers', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'recipientTransfers', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'rejectTransfer', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'requestTransfer', values: [AddressLike, string[], string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferRequests', values: [BytesLike]): string;

    decodeFunctionResult(functionFragment: 'approveTransfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'completeTransfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPatientRecords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPatientTransfers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRecipientTransfers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTransferRequest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'medicalRecords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'patientTransfers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recipientTransfers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rejectTransfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestTransfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferRequests', data: BytesLike): Result;
  }

  
    export namespace TransferApprovedEvent {
      export type InputTuple = [requestId: BytesLike, fromPatient: AddressLike, toRecipient: AddressLike, approvedAt: BigNumberish];
      export type OutputTuple = [requestId: string, fromPatient: string, toRecipient: string, approvedAt: bigint];
      export interface OutputObject {requestId: string, fromPatient: string, toRecipient: string, approvedAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferCompletedEvent {
      export type InputTuple = [requestId: BytesLike, fromPatient: AddressLike, toRecipient: AddressLike, completedAt: BigNumberish];
      export type OutputTuple = [requestId: string, fromPatient: string, toRecipient: string, completedAt: bigint];
      export interface OutputObject {requestId: string, fromPatient: string, toRecipient: string, completedAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferRejectedEvent {
      export type InputTuple = [requestId: BytesLike, fromPatient: AddressLike, toRecipient: AddressLike, rejectedAt: BigNumberish];
      export type OutputTuple = [requestId: string, fromPatient: string, toRecipient: string, rejectedAt: bigint];
      export interface OutputObject {requestId: string, fromPatient: string, toRecipient: string, rejectedAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferRequestedEvent {
      export type InputTuple = [requestId: BytesLike, fromPatient: AddressLike, toRecipient: AddressLike, ipfsCids: string[], timestamp: BigNumberish, purpose: string, expiry: BigNumberish];
      export type OutputTuple = [requestId: string, fromPatient: string, toRecipient: string, ipfsCids: string[], timestamp: bigint, purpose: string, expiry: bigint];
      export interface OutputObject {requestId: string, fromPatient: string, toRecipient: string, ipfsCids: string[], timestamp: bigint, purpose: string, expiry: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MedicalRecordTransfer extends BaseContract {
    
    connect(runner?: ContractRunner | null): MedicalRecordTransfer;
    waitForDeployment(): Promise<this>;

    interface: MedicalRecordTransferInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    approveTransfer: TypedContractMethod<
      [_requestId: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    completeTransfer: TypedContractMethod<
      [_requestId: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    getPatientRecords: TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    getPatientTransfers: TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    getRecipientTransfers: TypedContractMethod<
      [_recipient: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    getTransferRequest: TypedContractMethod<
      [_requestId: BytesLike, ],
      [[string, string, string[], bigint, boolean, boolean, string, bigint] & {fromPatient: string, toRecipient: string, ipfsCids: string[], timestamp: bigint, completed: boolean, approved: boolean, purpose: string, expiry: bigint }],
      'view'
    >
    

    
    medicalRecords: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    patientTransfers: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [string],
      'view'
    >
    

    
    recipientTransfers: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [string],
      'view'
    >
    

    
    rejectTransfer: TypedContractMethod<
      [_requestId: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    requestTransfer: TypedContractMethod<
      [_toRecipient: AddressLike, _ipfsCids: string[], _purpose: string, _durationInHours: BigNumberish, ],
      [string],
      'nonpayable'
    >
    

    
    transferRequests: TypedContractMethod<
      [arg0: BytesLike, ],
      [[string, string, bigint, boolean, boolean, string, bigint] & {fromPatient: string, toRecipient: string, timestamp: bigint, completed: boolean, approved: boolean, purpose: string, expiry: bigint }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'approveTransfer'): TypedContractMethod<
      [_requestId: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'completeTransfer'): TypedContractMethod<
      [_requestId: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getPatientRecords'): TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getPatientTransfers'): TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getRecipientTransfers'): TypedContractMethod<
      [_recipient: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getTransferRequest'): TypedContractMethod<
      [_requestId: BytesLike, ],
      [[string, string, string[], bigint, boolean, boolean, string, bigint] & {fromPatient: string, toRecipient: string, ipfsCids: string[], timestamp: bigint, completed: boolean, approved: boolean, purpose: string, expiry: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'medicalRecords'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'patientTransfers'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'recipientTransfers'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rejectTransfer'): TypedContractMethod<
      [_requestId: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestTransfer'): TypedContractMethod<
      [_toRecipient: AddressLike, _ipfsCids: string[], _purpose: string, _durationInHours: BigNumberish, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferRequests'): TypedContractMethod<
      [arg0: BytesLike, ],
      [[string, string, bigint, boolean, boolean, string, bigint] & {fromPatient: string, toRecipient: string, timestamp: bigint, completed: boolean, approved: boolean, purpose: string, expiry: bigint }],
      'view'
    >;

    getEvent(key: 'TransferApproved'): TypedContractEvent<TransferApprovedEvent.InputTuple, TransferApprovedEvent.OutputTuple, TransferApprovedEvent.OutputObject>;
getEvent(key: 'TransferCompleted'): TypedContractEvent<TransferCompletedEvent.InputTuple, TransferCompletedEvent.OutputTuple, TransferCompletedEvent.OutputObject>;
getEvent(key: 'TransferRejected'): TypedContractEvent<TransferRejectedEvent.InputTuple, TransferRejectedEvent.OutputTuple, TransferRejectedEvent.OutputObject>;
getEvent(key: 'TransferRequested'): TypedContractEvent<TransferRequestedEvent.InputTuple, TransferRequestedEvent.OutputTuple, TransferRequestedEvent.OutputObject>;

    filters: {
      
      'TransferApproved(bytes32,address,address,uint256)': TypedContractEvent<TransferApprovedEvent.InputTuple, TransferApprovedEvent.OutputTuple, TransferApprovedEvent.OutputObject>;
      TransferApproved: TypedContractEvent<TransferApprovedEvent.InputTuple, TransferApprovedEvent.OutputTuple, TransferApprovedEvent.OutputObject>;
    

      'TransferCompleted(bytes32,address,address,uint256)': TypedContractEvent<TransferCompletedEvent.InputTuple, TransferCompletedEvent.OutputTuple, TransferCompletedEvent.OutputObject>;
      TransferCompleted: TypedContractEvent<TransferCompletedEvent.InputTuple, TransferCompletedEvent.OutputTuple, TransferCompletedEvent.OutputObject>;
    

      'TransferRejected(bytes32,address,address,uint256)': TypedContractEvent<TransferRejectedEvent.InputTuple, TransferRejectedEvent.OutputTuple, TransferRejectedEvent.OutputObject>;
      TransferRejected: TypedContractEvent<TransferRejectedEvent.InputTuple, TransferRejectedEvent.OutputTuple, TransferRejectedEvent.OutputObject>;
    

      'TransferRequested(bytes32,address,address,string[],uint256,string,uint256)': TypedContractEvent<TransferRequestedEvent.InputTuple, TransferRequestedEvent.OutputTuple, TransferRequestedEvent.OutputObject>;
      TransferRequested: TypedContractEvent<TransferRequestedEvent.InputTuple, TransferRequestedEvent.OutputTuple, TransferRequestedEvent.OutputObject>;
    
    };
  }