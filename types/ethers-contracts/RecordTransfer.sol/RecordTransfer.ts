/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace RecordTransfer {
      
    export type AccessLogStruct = {accessedBy: AddressLike, timestamp: BigNumberish, ipfsCid: string, purpose: string}

    export type AccessLogStructOutput = [accessedBy: string, timestamp: bigint, ipfsCid: string, purpose: string] & {accessedBy: string, timestamp: bigint, ipfsCid: string, purpose: string }
  

    export type TransferStruct = {from: AddressLike, to: AddressLike, ipfsCid: string, timestamp: BigNumberish, revoked: boolean, purpose: string}

    export type TransferStructOutput = [from: string, to: string, ipfsCid: string, timestamp: bigint, revoked: boolean, purpose: string] & {from: string, to: string, ipfsCid: string, timestamp: bigint, revoked: boolean, purpose: string }
  
    }

  export interface RecordTransferInterface extends Interface {
    getFunction(nameOrSignature: "getAccessLogs" | "getAuthorizedProviders" | "getTransferCount" | "getTransfers" | "grantAccess" | "hasAccess" | "healthConsent" | "logAccess" | "revokeAccess" | "revokeAllAccess" | "transferRecord"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AccessGranted" | "AccessLogged" | "AccessRevoked" | "RecordTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'getAccessLogs', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getAuthorizedProviders', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getTransferCount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getTransfers', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'grantAccess', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'hasAccess', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'healthConsent', values?: undefined): string;
encodeFunctionData(functionFragment: 'logAccess', values: [AddressLike, string, string]): string;
encodeFunctionData(functionFragment: 'revokeAccess', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'revokeAllAccess', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferRecord', values: [AddressLike, string, string]): string;

    decodeFunctionResult(functionFragment: 'getAccessLogs', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAuthorizedProviders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTransferCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTransfers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'healthConsent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'logAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeAllAccess', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferRecord', data: BytesLike): Result;
  }

  
    export namespace AccessGrantedEvent {
      export type InputTuple = [patient: AddressLike, provider: AddressLike, timestamp: BigNumberish];
      export type OutputTuple = [patient: string, provider: string, timestamp: bigint];
      export interface OutputObject {patient: string, provider: string, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace AccessLoggedEvent {
      export type InputTuple = [patient: AddressLike, accessedBy: AddressLike, ipfsCid: string, timestamp: BigNumberish, purpose: string];
      export type OutputTuple = [patient: string, accessedBy: string, ipfsCid: string, timestamp: bigint, purpose: string];
      export interface OutputObject {patient: string, accessedBy: string, ipfsCid: string, timestamp: bigint, purpose: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace AccessRevokedEvent {
      export type InputTuple = [patient: AddressLike, provider: AddressLike, ipfsCid: string, timestamp: BigNumberish];
      export type OutputTuple = [patient: string, provider: string, ipfsCid: string, timestamp: bigint];
      export interface OutputObject {patient: string, provider: string, ipfsCid: string, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RecordTransferredEvent {
      export type InputTuple = [patient: AddressLike, provider: AddressLike, ipfsCid: string, timestamp: BigNumberish, purpose: string];
      export type OutputTuple = [patient: string, provider: string, ipfsCid: string, timestamp: bigint, purpose: string];
      export interface OutputObject {patient: string, provider: string, ipfsCid: string, timestamp: bigint, purpose: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface RecordTransfer extends BaseContract {
    
    connect(runner?: ContractRunner | null): RecordTransfer;
    waitForDeployment(): Promise<this>;

    interface: RecordTransferInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getAccessLogs: TypedContractMethod<
      [_patient: AddressLike, ],
      [RecordTransfer.AccessLogStructOutput[]],
      'view'
    >
    

    
    getAuthorizedProviders: TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    getTransferCount: TypedContractMethod<
      [_patient: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getTransfers: TypedContractMethod<
      [_patient: AddressLike, ],
      [RecordTransfer.TransferStructOutput[]],
      'view'
    >
    

    
    grantAccess: TypedContractMethod<
      [_provider: AddressLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    hasAccess: TypedContractMethod<
      [_patient: AddressLike, _provider: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    healthConsent: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    logAccess: TypedContractMethod<
      [_patient: AddressLike, _ipfsCid: string, _purpose: string, ],
      [boolean],
      'nonpayable'
    >
    

    
    revokeAccess: TypedContractMethod<
      [_provider: AddressLike, _ipfsCid: string, ],
      [boolean],
      'nonpayable'
    >
    

    
    revokeAllAccess: TypedContractMethod<
      [_provider: AddressLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferRecord: TypedContractMethod<
      [_provider: AddressLike, _ipfsCid: string, _purpose: string, ],
      [boolean],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getAccessLogs'): TypedContractMethod<
      [_patient: AddressLike, ],
      [RecordTransfer.AccessLogStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getAuthorizedProviders'): TypedContractMethod<
      [_patient: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getTransferCount'): TypedContractMethod<
      [_patient: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTransfers'): TypedContractMethod<
      [_patient: AddressLike, ],
      [RecordTransfer.TransferStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantAccess'): TypedContractMethod<
      [_provider: AddressLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasAccess'): TypedContractMethod<
      [_patient: AddressLike, _provider: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'healthConsent'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'logAccess'): TypedContractMethod<
      [_patient: AddressLike, _ipfsCid: string, _purpose: string, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeAccess'): TypedContractMethod<
      [_provider: AddressLike, _ipfsCid: string, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeAllAccess'): TypedContractMethod<
      [_provider: AddressLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferRecord'): TypedContractMethod<
      [_provider: AddressLike, _ipfsCid: string, _purpose: string, ],
      [boolean],
      'nonpayable'
    >;

    getEvent(key: 'AccessGranted'): TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
getEvent(key: 'AccessLogged'): TypedContractEvent<AccessLoggedEvent.InputTuple, AccessLoggedEvent.OutputTuple, AccessLoggedEvent.OutputObject>;
getEvent(key: 'AccessRevoked'): TypedContractEvent<AccessRevokedEvent.InputTuple, AccessRevokedEvent.OutputTuple, AccessRevokedEvent.OutputObject>;
getEvent(key: 'RecordTransferred'): TypedContractEvent<RecordTransferredEvent.InputTuple, RecordTransferredEvent.OutputTuple, RecordTransferredEvent.OutputObject>;

    filters: {
      
      'AccessGranted(address,address,uint256)': TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
      AccessGranted: TypedContractEvent<AccessGrantedEvent.InputTuple, AccessGrantedEvent.OutputTuple, AccessGrantedEvent.OutputObject>;
    

      'AccessLogged(address,address,string,uint256,string)': TypedContractEvent<AccessLoggedEvent.InputTuple, AccessLoggedEvent.OutputTuple, AccessLoggedEvent.OutputObject>;
      AccessLogged: TypedContractEvent<AccessLoggedEvent.InputTuple, AccessLoggedEvent.OutputTuple, AccessLoggedEvent.OutputObject>;
    

      'AccessRevoked(address,address,string,uint256)': TypedContractEvent<AccessRevokedEvent.InputTuple, AccessRevokedEvent.OutputTuple, AccessRevokedEvent.OutputObject>;
      AccessRevoked: TypedContractEvent<AccessRevokedEvent.InputTuple, AccessRevokedEvent.OutputTuple, AccessRevokedEvent.OutputObject>;
    

      'RecordTransferred(address,address,string,uint256,string)': TypedContractEvent<RecordTransferredEvent.InputTuple, RecordTransferredEvent.OutputTuple, RecordTransferredEvent.OutputObject>;
      RecordTransferred: TypedContractEvent<RecordTransferredEvent.InputTuple, RecordTransferredEvent.OutputTuple, RecordTransferredEvent.OutputObject>;
    
    };
  }